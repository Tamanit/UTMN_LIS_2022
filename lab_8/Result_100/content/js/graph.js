/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 93.0, "minX": 0.0, "maxY": 14854.0, "series": [{"data": [[0.0, 975.0], [0.1, 975.0], [0.2, 975.0], [0.3, 975.0], [0.4, 975.0], [0.5, 975.0], [0.6, 975.0], [0.7, 975.0], [0.8, 975.0], [0.9, 975.0], [1.0, 1327.0], [1.1, 1327.0], [1.2, 1327.0], [1.3, 1327.0], [1.4, 1327.0], [1.5, 1327.0], [1.6, 1327.0], [1.7, 1327.0], [1.8, 1327.0], [1.9, 1327.0], [2.0, 1532.0], [2.1, 1532.0], [2.2, 1532.0], [2.3, 1532.0], [2.4, 1532.0], [2.5, 1532.0], [2.6, 1532.0], [2.7, 1532.0], [2.8, 1532.0], [2.9, 1532.0], [3.0, 2143.0], [3.1, 2143.0], [3.2, 2143.0], [3.3, 2143.0], [3.4, 2143.0], [3.5, 2143.0], [3.6, 2143.0], [3.7, 2143.0], [3.8, 2143.0], [3.9, 2143.0], [4.0, 2320.0], [4.1, 2320.0], [4.2, 2320.0], [4.3, 2320.0], [4.4, 2320.0], [4.5, 2320.0], [4.6, 2320.0], [4.7, 2320.0], [4.8, 2320.0], [4.9, 2320.0], [5.0, 2594.0], [5.1, 2594.0], [5.2, 2594.0], [5.3, 2594.0], [5.4, 2594.0], [5.5, 2594.0], [5.6, 2594.0], [5.7, 2594.0], [5.8, 2594.0], [5.9, 2594.0], [6.0, 2643.0], [6.1, 2643.0], [6.2, 2643.0], [6.3, 2643.0], [6.4, 2643.0], [6.5, 2643.0], [6.6, 2643.0], [6.7, 2643.0], [6.8, 2643.0], [6.9, 2643.0], [7.0, 2822.0], [7.1, 2822.0], [7.2, 2822.0], [7.3, 2822.0], [7.4, 2822.0], [7.5, 2822.0], [7.6, 2822.0], [7.7, 2822.0], [7.8, 2822.0], [7.9, 2822.0], [8.0, 3035.0], [8.1, 3035.0], [8.2, 3035.0], [8.3, 3035.0], [8.4, 3035.0], [8.5, 3035.0], [8.6, 3035.0], [8.7, 3035.0], [8.8, 3035.0], [8.9, 3035.0], [9.0, 3072.0], [9.1, 3072.0], [9.2, 3072.0], [9.3, 3072.0], [9.4, 3072.0], [9.5, 3072.0], [9.6, 3072.0], [9.7, 3072.0], [9.8, 3072.0], [9.9, 3072.0], [10.0, 3152.0], [10.1, 3152.0], [10.2, 3152.0], [10.3, 3152.0], [10.4, 3152.0], [10.5, 3152.0], [10.6, 3152.0], [10.7, 3152.0], [10.8, 3152.0], [10.9, 3152.0], [11.0, 3237.0], [11.1, 3237.0], [11.2, 3237.0], [11.3, 3237.0], [11.4, 3237.0], [11.5, 3237.0], [11.6, 3237.0], [11.7, 3237.0], [11.8, 3237.0], [11.9, 3237.0], [12.0, 3332.0], [12.1, 3332.0], [12.2, 3332.0], [12.3, 3332.0], [12.4, 3332.0], [12.5, 3332.0], [12.6, 3332.0], [12.7, 3332.0], [12.8, 3332.0], [12.9, 3332.0], [13.0, 3383.0], [13.1, 3383.0], [13.2, 3383.0], [13.3, 3383.0], [13.4, 3383.0], [13.5, 3383.0], [13.6, 3383.0], [13.7, 3383.0], [13.8, 3383.0], [13.9, 3383.0], [14.0, 3534.0], [14.1, 3534.0], [14.2, 3534.0], [14.3, 3534.0], [14.4, 3534.0], [14.5, 3534.0], [14.6, 3534.0], [14.7, 3534.0], [14.8, 3534.0], [14.9, 3534.0], [15.0, 3628.0], [15.1, 3628.0], [15.2, 3628.0], [15.3, 3628.0], [15.4, 3628.0], [15.5, 3628.0], [15.6, 3628.0], [15.7, 3628.0], [15.8, 3628.0], [15.9, 3628.0], [16.0, 3759.0], [16.1, 3759.0], [16.2, 3759.0], [16.3, 3759.0], [16.4, 3759.0], [16.5, 3759.0], [16.6, 3759.0], [16.7, 3759.0], [16.8, 3759.0], [16.9, 3759.0], [17.0, 3780.0], [17.1, 3780.0], [17.2, 3780.0], [17.3, 3780.0], [17.4, 3780.0], [17.5, 3780.0], [17.6, 3780.0], [17.7, 3780.0], [17.8, 3780.0], [17.9, 3780.0], [18.0, 3799.0], [18.1, 3799.0], [18.2, 3799.0], [18.3, 3799.0], [18.4, 3799.0], [18.5, 3799.0], [18.6, 3799.0], [18.7, 3799.0], [18.8, 3799.0], [18.9, 3799.0], [19.0, 3860.0], [19.1, 3860.0], [19.2, 3860.0], [19.3, 3860.0], [19.4, 3860.0], [19.5, 3860.0], [19.6, 3860.0], [19.7, 3860.0], [19.8, 3860.0], [19.9, 3860.0], [20.0, 3884.0], [20.1, 3884.0], [20.2, 3884.0], [20.3, 3884.0], [20.4, 3884.0], [20.5, 3884.0], [20.6, 3884.0], [20.7, 3884.0], [20.8, 3884.0], [20.9, 3884.0], [21.0, 3960.0], [21.1, 3960.0], [21.2, 3960.0], [21.3, 3960.0], [21.4, 3960.0], [21.5, 3960.0], [21.6, 3960.0], [21.7, 3960.0], [21.8, 3960.0], [21.9, 3960.0], [22.0, 4071.0], [22.1, 4071.0], [22.2, 4071.0], [22.3, 4071.0], [22.4, 4071.0], [22.5, 4071.0], [22.6, 4071.0], [22.7, 4071.0], [22.8, 4071.0], [22.9, 4071.0], [23.0, 4328.0], [23.1, 4328.0], [23.2, 4328.0], [23.3, 4328.0], [23.4, 4328.0], [23.5, 4328.0], [23.6, 4328.0], [23.7, 4328.0], [23.8, 4328.0], [23.9, 4328.0], [24.0, 4438.0], [24.1, 4438.0], [24.2, 4438.0], [24.3, 4438.0], [24.4, 4438.0], [24.5, 4438.0], [24.6, 4438.0], [24.7, 4438.0], [24.8, 4438.0], [24.9, 4438.0], [25.0, 4596.0], [25.1, 4596.0], [25.2, 4596.0], [25.3, 4596.0], [25.4, 4596.0], [25.5, 4596.0], [25.6, 4596.0], [25.7, 4596.0], [25.8, 4596.0], [25.9, 4596.0], [26.0, 4777.0], [26.1, 4777.0], [26.2, 4777.0], [26.3, 4777.0], [26.4, 4777.0], [26.5, 4777.0], [26.6, 4777.0], [26.7, 4777.0], [26.8, 4777.0], [26.9, 4777.0], [27.0, 4826.0], [27.1, 4826.0], [27.2, 4826.0], [27.3, 4826.0], [27.4, 4826.0], [27.5, 4826.0], [27.6, 4826.0], [27.7, 4826.0], [27.8, 4826.0], [27.9, 4826.0], [28.0, 4973.0], [28.1, 4973.0], [28.2, 4973.0], [28.3, 4973.0], [28.4, 4973.0], [28.5, 4973.0], [28.6, 4973.0], [28.7, 4973.0], [28.8, 4973.0], [28.9, 4973.0], [29.0, 5112.0], [29.1, 5112.0], [29.2, 5112.0], [29.3, 5112.0], [29.4, 5112.0], [29.5, 5112.0], [29.6, 5112.0], [29.7, 5112.0], [29.8, 5112.0], [29.9, 5112.0], [30.0, 5135.0], [30.1, 5135.0], [30.2, 5135.0], [30.3, 5135.0], [30.4, 5135.0], [30.5, 5135.0], [30.6, 5135.0], [30.7, 5135.0], [30.8, 5135.0], [30.9, 5135.0], [31.0, 5182.0], [31.1, 5182.0], [31.2, 5182.0], [31.3, 5182.0], [31.4, 5182.0], [31.5, 5182.0], [31.6, 5182.0], [31.7, 5182.0], [31.8, 5182.0], [31.9, 5182.0], [32.0, 5194.0], [32.1, 5194.0], [32.2, 5194.0], [32.3, 5194.0], [32.4, 5194.0], [32.5, 5194.0], [32.6, 5194.0], [32.7, 5194.0], [32.8, 5194.0], [32.9, 5194.0], [33.0, 5243.0], [33.1, 5243.0], [33.2, 5243.0], [33.3, 5243.0], [33.4, 5243.0], [33.5, 5243.0], [33.6, 5243.0], [33.7, 5243.0], [33.8, 5243.0], [33.9, 5243.0], [34.0, 5341.0], [34.1, 5341.0], [34.2, 5341.0], [34.3, 5341.0], [34.4, 5341.0], [34.5, 5341.0], [34.6, 5341.0], [34.7, 5341.0], [34.8, 5341.0], [34.9, 5341.0], [35.0, 5362.0], [35.1, 5362.0], [35.2, 5362.0], [35.3, 5362.0], [35.4, 5362.0], [35.5, 5362.0], [35.6, 5362.0], [35.7, 5362.0], [35.8, 5362.0], [35.9, 5362.0], [36.0, 5434.0], [36.1, 5434.0], [36.2, 5434.0], [36.3, 5434.0], [36.4, 5434.0], [36.5, 5434.0], [36.6, 5434.0], [36.7, 5434.0], [36.8, 5434.0], [36.9, 5434.0], [37.0, 5528.0], [37.1, 5528.0], [37.2, 5528.0], [37.3, 5528.0], [37.4, 5528.0], [37.5, 5528.0], [37.6, 5528.0], [37.7, 5528.0], [37.8, 5528.0], [37.9, 5528.0], [38.0, 5601.0], [38.1, 5601.0], [38.2, 5601.0], [38.3, 5601.0], [38.4, 5601.0], [38.5, 5601.0], [38.6, 5601.0], [38.7, 5601.0], [38.8, 5601.0], [38.9, 5601.0], [39.0, 5655.0], [39.1, 5655.0], [39.2, 5655.0], [39.3, 5655.0], [39.4, 5655.0], [39.5, 5655.0], [39.6, 5655.0], [39.7, 5655.0], [39.8, 5655.0], [39.9, 5655.0], [40.0, 5683.0], [40.1, 5683.0], [40.2, 5683.0], [40.3, 5683.0], [40.4, 5683.0], [40.5, 5683.0], [40.6, 5683.0], [40.7, 5683.0], [40.8, 5683.0], [40.9, 5683.0], [41.0, 5704.0], [41.1, 5704.0], [41.2, 5704.0], [41.3, 5704.0], [41.4, 5704.0], [41.5, 5704.0], [41.6, 5704.0], [41.7, 5704.0], [41.8, 5704.0], [41.9, 5704.0], [42.0, 5838.0], [42.1, 5838.0], [42.2, 5838.0], [42.3, 5838.0], [42.4, 5838.0], [42.5, 5838.0], [42.6, 5838.0], [42.7, 5838.0], [42.8, 5838.0], [42.9, 5838.0], [43.0, 5867.0], [43.1, 5867.0], [43.2, 5867.0], [43.3, 5867.0], [43.4, 5867.0], [43.5, 5867.0], [43.6, 5867.0], [43.7, 5867.0], [43.8, 5867.0], [43.9, 5867.0], [44.0, 5890.0], [44.1, 5890.0], [44.2, 5890.0], [44.3, 5890.0], [44.4, 5890.0], [44.5, 5890.0], [44.6, 5890.0], [44.7, 5890.0], [44.8, 5890.0], [44.9, 5890.0], [45.0, 6105.0], [45.1, 6105.0], [45.2, 6105.0], [45.3, 6105.0], [45.4, 6105.0], [45.5, 6105.0], [45.6, 6105.0], [45.7, 6105.0], [45.8, 6105.0], [45.9, 6105.0], [46.0, 6163.0], [46.1, 6163.0], [46.2, 6163.0], [46.3, 6163.0], [46.4, 6163.0], [46.5, 6163.0], [46.6, 6163.0], [46.7, 6163.0], [46.8, 6163.0], [46.9, 6163.0], [47.0, 6320.0], [47.1, 6320.0], [47.2, 6320.0], [47.3, 6320.0], [47.4, 6320.0], [47.5, 6320.0], [47.6, 6320.0], [47.7, 6320.0], [47.8, 6320.0], [47.9, 6320.0], [48.0, 6368.0], [48.1, 6368.0], [48.2, 6368.0], [48.3, 6368.0], [48.4, 6368.0], [48.5, 6368.0], [48.6, 6368.0], [48.7, 6368.0], [48.8, 6368.0], [48.9, 6368.0], [49.0, 6378.0], [49.1, 6378.0], [49.2, 6378.0], [49.3, 6378.0], [49.4, 6378.0], [49.5, 6378.0], [49.6, 6378.0], [49.7, 6378.0], [49.8, 6378.0], [49.9, 6378.0], [50.0, 6527.0], [50.1, 6527.0], [50.2, 6527.0], [50.3, 6527.0], [50.4, 6527.0], [50.5, 6527.0], [50.6, 6527.0], [50.7, 6527.0], [50.8, 6527.0], [50.9, 6527.0], [51.0, 6683.0], [51.1, 6683.0], [51.2, 6683.0], [51.3, 6683.0], [51.4, 6683.0], [51.5, 6683.0], [51.6, 6683.0], [51.7, 6683.0], [51.8, 6683.0], [51.9, 6683.0], [52.0, 6998.0], [52.1, 6998.0], [52.2, 6998.0], [52.3, 6998.0], [52.4, 6998.0], [52.5, 6998.0], [52.6, 6998.0], [52.7, 6998.0], [52.8, 6998.0], [52.9, 6998.0], [53.0, 7045.0], [53.1, 7045.0], [53.2, 7045.0], [53.3, 7045.0], [53.4, 7045.0], [53.5, 7045.0], [53.6, 7045.0], [53.7, 7045.0], [53.8, 7045.0], [53.9, 7045.0], [54.0, 7113.0], [54.1, 7113.0], [54.2, 7113.0], [54.3, 7113.0], [54.4, 7113.0], [54.5, 7113.0], [54.6, 7113.0], [54.7, 7113.0], [54.8, 7113.0], [54.9, 7113.0], [55.0, 7190.0], [55.1, 7190.0], [55.2, 7190.0], [55.3, 7190.0], [55.4, 7190.0], [55.5, 7190.0], [55.6, 7190.0], [55.7, 7190.0], [55.8, 7190.0], [55.9, 7190.0], [56.0, 7252.0], [56.1, 7252.0], [56.2, 7252.0], [56.3, 7252.0], [56.4, 7252.0], [56.5, 7252.0], [56.6, 7252.0], [56.7, 7252.0], [56.8, 7252.0], [56.9, 7252.0], [57.0, 7321.0], [57.1, 7321.0], [57.2, 7321.0], [57.3, 7321.0], [57.4, 7321.0], [57.5, 7321.0], [57.6, 7321.0], [57.7, 7321.0], [57.8, 7321.0], [57.9, 7321.0], [58.0, 7322.0], [58.1, 7322.0], [58.2, 7322.0], [58.3, 7322.0], [58.4, 7322.0], [58.5, 7322.0], [58.6, 7322.0], [58.7, 7322.0], [58.8, 7322.0], [58.9, 7322.0], [59.0, 7340.0], [59.1, 7340.0], [59.2, 7340.0], [59.3, 7340.0], [59.4, 7340.0], [59.5, 7340.0], [59.6, 7340.0], [59.7, 7340.0], [59.8, 7340.0], [59.9, 7340.0], [60.0, 7351.0], [60.1, 7351.0], [60.2, 7351.0], [60.3, 7351.0], [60.4, 7351.0], [60.5, 7351.0], [60.6, 7351.0], [60.7, 7351.0], [60.8, 7351.0], [60.9, 7351.0], [61.0, 7360.0], [61.1, 7360.0], [61.2, 7360.0], [61.3, 7360.0], [61.4, 7360.0], [61.5, 7360.0], [61.6, 7360.0], [61.7, 7360.0], [61.8, 7360.0], [61.9, 7360.0], [62.0, 7392.0], [62.1, 7392.0], [62.2, 7392.0], [62.3, 7392.0], [62.4, 7392.0], [62.5, 7392.0], [62.6, 7392.0], [62.7, 7392.0], [62.8, 7392.0], [62.9, 7392.0], [63.0, 7425.0], [63.1, 7425.0], [63.2, 7425.0], [63.3, 7425.0], [63.4, 7425.0], [63.5, 7425.0], [63.6, 7425.0], [63.7, 7425.0], [63.8, 7425.0], [63.9, 7425.0], [64.0, 7537.0], [64.1, 7537.0], [64.2, 7537.0], [64.3, 7537.0], [64.4, 7537.0], [64.5, 7537.0], [64.6, 7537.0], [64.7, 7537.0], [64.8, 7537.0], [64.9, 7537.0], [65.0, 7548.0], [65.1, 7548.0], [65.2, 7548.0], [65.3, 7548.0], [65.4, 7548.0], [65.5, 7548.0], [65.6, 7548.0], [65.7, 7548.0], [65.8, 7548.0], [65.9, 7548.0], [66.0, 7592.0], [66.1, 7592.0], [66.2, 7592.0], [66.3, 7592.0], [66.4, 7592.0], [66.5, 7592.0], [66.6, 7592.0], [66.7, 7592.0], [66.8, 7592.0], [66.9, 7592.0], [67.0, 7717.0], [67.1, 7717.0], [67.2, 7717.0], [67.3, 7717.0], [67.4, 7717.0], [67.5, 7717.0], [67.6, 7717.0], [67.7, 7717.0], [67.8, 7717.0], [67.9, 7717.0], [68.0, 7851.0], [68.1, 7851.0], [68.2, 7851.0], [68.3, 7851.0], [68.4, 7851.0], [68.5, 7851.0], [68.6, 7851.0], [68.7, 7851.0], [68.8, 7851.0], [68.9, 7851.0], [69.0, 8055.0], [69.1, 8055.0], [69.2, 8055.0], [69.3, 8055.0], [69.4, 8055.0], [69.5, 8055.0], [69.6, 8055.0], [69.7, 8055.0], [69.8, 8055.0], [69.9, 8055.0], [70.0, 8104.0], [70.1, 8104.0], [70.2, 8104.0], [70.3, 8104.0], [70.4, 8104.0], [70.5, 8104.0], [70.6, 8104.0], [70.7, 8104.0], [70.8, 8104.0], [70.9, 8104.0], [71.0, 8196.0], [71.1, 8196.0], [71.2, 8196.0], [71.3, 8196.0], [71.4, 8196.0], [71.5, 8196.0], [71.6, 8196.0], [71.7, 8196.0], [71.8, 8196.0], [71.9, 8196.0], [72.0, 8310.0], [72.1, 8310.0], [72.2, 8310.0], [72.3, 8310.0], [72.4, 8310.0], [72.5, 8310.0], [72.6, 8310.0], [72.7, 8310.0], [72.8, 8310.0], [72.9, 8310.0], [73.0, 8343.0], [73.1, 8343.0], [73.2, 8343.0], [73.3, 8343.0], [73.4, 8343.0], [73.5, 8343.0], [73.6, 8343.0], [73.7, 8343.0], [73.8, 8343.0], [73.9, 8343.0], [74.0, 8371.0], [74.1, 8371.0], [74.2, 8371.0], [74.3, 8371.0], [74.4, 8371.0], [74.5, 8371.0], [74.6, 8371.0], [74.7, 8371.0], [74.8, 8371.0], [74.9, 8371.0], [75.0, 8382.0], [75.1, 8382.0], [75.2, 8382.0], [75.3, 8382.0], [75.4, 8382.0], [75.5, 8382.0], [75.6, 8382.0], [75.7, 8382.0], [75.8, 8382.0], [75.9, 8382.0], [76.0, 8489.0], [76.1, 8489.0], [76.2, 8489.0], [76.3, 8489.0], [76.4, 8489.0], [76.5, 8489.0], [76.6, 8489.0], [76.7, 8489.0], [76.8, 8489.0], [76.9, 8489.0], [77.0, 8518.0], [77.1, 8518.0], [77.2, 8518.0], [77.3, 8518.0], [77.4, 8518.0], [77.5, 8518.0], [77.6, 8518.0], [77.7, 8518.0], [77.8, 8518.0], [77.9, 8518.0], [78.0, 8608.0], [78.1, 8608.0], [78.2, 8608.0], [78.3, 8608.0], [78.4, 8608.0], [78.5, 8608.0], [78.6, 8608.0], [78.7, 8608.0], [78.8, 8608.0], [78.9, 8608.0], [79.0, 8626.0], [79.1, 8626.0], [79.2, 8626.0], [79.3, 8626.0], [79.4, 8626.0], [79.5, 8626.0], [79.6, 8626.0], [79.7, 8626.0], [79.8, 8626.0], [79.9, 8626.0], [80.0, 8638.0], [80.1, 8638.0], [80.2, 8638.0], [80.3, 8638.0], [80.4, 8638.0], [80.5, 8638.0], [80.6, 8638.0], [80.7, 8638.0], [80.8, 8638.0], [80.9, 8638.0], [81.0, 8745.0], [81.1, 8745.0], [81.2, 8745.0], [81.3, 8745.0], [81.4, 8745.0], [81.5, 8745.0], [81.6, 8745.0], [81.7, 8745.0], [81.8, 8745.0], [81.9, 8745.0], [82.0, 8807.0], [82.1, 8807.0], [82.2, 8807.0], [82.3, 8807.0], [82.4, 8807.0], [82.5, 8807.0], [82.6, 8807.0], [82.7, 8807.0], [82.8, 8807.0], [82.9, 8807.0], [83.0, 8885.0], [83.1, 8885.0], [83.2, 8885.0], [83.3, 8885.0], [83.4, 8885.0], [83.5, 8885.0], [83.6, 8885.0], [83.7, 8885.0], [83.8, 8885.0], [83.9, 8885.0], [84.0, 9016.0], [84.1, 9016.0], [84.2, 9016.0], [84.3, 9016.0], [84.4, 9016.0], [84.5, 9016.0], [84.6, 9016.0], [84.7, 9016.0], [84.8, 9016.0], [84.9, 9016.0], [85.0, 9557.0], [85.1, 9557.0], [85.2, 9557.0], [85.3, 9557.0], [85.4, 9557.0], [85.5, 9557.0], [85.6, 9557.0], [85.7, 9557.0], [85.8, 9557.0], [85.9, 9557.0], [86.0, 9717.0], [86.1, 9717.0], [86.2, 9717.0], [86.3, 9717.0], [86.4, 9717.0], [86.5, 9717.0], [86.6, 9717.0], [86.7, 9717.0], [86.8, 9717.0], [86.9, 9717.0], [87.0, 9881.0], [87.1, 9881.0], [87.2, 9881.0], [87.3, 9881.0], [87.4, 9881.0], [87.5, 9881.0], [87.6, 9881.0], [87.7, 9881.0], [87.8, 9881.0], [87.9, 9881.0], [88.0, 10037.0], [88.1, 10037.0], [88.2, 10037.0], [88.3, 10037.0], [88.4, 10037.0], [88.5, 10037.0], [88.6, 10037.0], [88.7, 10037.0], [88.8, 10037.0], [88.9, 10037.0], [89.0, 10083.0], [89.1, 10083.0], [89.2, 10083.0], [89.3, 10083.0], [89.4, 10083.0], [89.5, 10083.0], [89.6, 10083.0], [89.7, 10083.0], [89.8, 10083.0], [89.9, 10083.0], [90.0, 10516.0], [90.1, 10516.0], [90.2, 10516.0], [90.3, 10516.0], [90.4, 10516.0], [90.5, 10516.0], [90.6, 10516.0], [90.7, 10516.0], [90.8, 10516.0], [90.9, 10516.0], [91.0, 10563.0], [91.1, 10563.0], [91.2, 10563.0], [91.3, 10563.0], [91.4, 10563.0], [91.5, 10563.0], [91.6, 10563.0], [91.7, 10563.0], [91.8, 10563.0], [91.9, 10563.0], [92.0, 10647.0], [92.1, 10647.0], [92.2, 10647.0], [92.3, 10647.0], [92.4, 10647.0], [92.5, 10647.0], [92.6, 10647.0], [92.7, 10647.0], [92.8, 10647.0], [92.9, 10647.0], [93.0, 10899.0], [93.1, 10899.0], [93.2, 10899.0], [93.3, 10899.0], [93.4, 10899.0], [93.5, 10899.0], [93.6, 10899.0], [93.7, 10899.0], [93.8, 10899.0], [93.9, 10899.0], [94.0, 11270.0], [94.1, 11270.0], [94.2, 11270.0], [94.3, 11270.0], [94.4, 11270.0], [94.5, 11270.0], [94.6, 11270.0], [94.7, 11270.0], [94.8, 11270.0], [94.9, 11270.0], [95.0, 12086.0], [95.1, 12086.0], [95.2, 12086.0], [95.3, 12086.0], [95.4, 12086.0], [95.5, 12086.0], [95.6, 12086.0], [95.7, 12086.0], [95.8, 12086.0], [95.9, 12086.0], [96.0, 12677.0], [96.1, 12677.0], [96.2, 12677.0], [96.3, 12677.0], [96.4, 12677.0], [96.5, 12677.0], [96.6, 12677.0], [96.7, 12677.0], [96.8, 12677.0], [96.9, 12677.0], [97.0, 12759.0], [97.1, 12759.0], [97.2, 12759.0], [97.3, 12759.0], [97.4, 12759.0], [97.5, 12759.0], [97.6, 12759.0], [97.7, 12759.0], [97.8, 12759.0], [97.9, 12759.0], [98.0, 14068.0], [98.1, 14068.0], [98.2, 14068.0], [98.3, 14068.0], [98.4, 14068.0], [98.5, 14068.0], [98.6, 14068.0], [98.7, 14068.0], [98.8, 14068.0], [98.9, 14068.0], [99.0, 14641.0], [99.1, 14641.0], [99.2, 14641.0], [99.3, 14641.0], [99.4, 14641.0], [99.5, 14641.0], [99.6, 14641.0], [99.7, 14641.0], [99.8, 14641.0], [99.9, 14641.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 93.0], [0.1, 93.0], [0.2, 93.0], [0.3, 93.0], [0.4, 93.0], [0.5, 93.0], [0.6, 93.0], [0.7, 93.0], [0.8, 93.0], [0.9, 93.0], [1.0, 115.0], [1.1, 115.0], [1.2, 115.0], [1.3, 115.0], [1.4, 115.0], [1.5, 115.0], [1.6, 115.0], [1.7, 115.0], [1.8, 115.0], [1.9, 115.0], [2.0, 118.0], [2.1, 118.0], [2.2, 118.0], [2.3, 118.0], [2.4, 118.0], [2.5, 118.0], [2.6, 118.0], [2.7, 118.0], [2.8, 118.0], [2.9, 118.0], [3.0, 122.0], [3.1, 122.0], [3.2, 122.0], [3.3, 122.0], [3.4, 122.0], [3.5, 122.0], [3.6, 122.0], [3.7, 122.0], [3.8, 122.0], [3.9, 122.0], [4.0, 126.0], [4.1, 126.0], [4.2, 126.0], [4.3, 126.0], [4.4, 126.0], [4.5, 126.0], [4.6, 126.0], [4.7, 126.0], [4.8, 126.0], [4.9, 126.0], [5.0, 130.0], [5.1, 130.0], [5.2, 130.0], [5.3, 130.0], [5.4, 130.0], [5.5, 130.0], [5.6, 130.0], [5.7, 130.0], [5.8, 130.0], [5.9, 130.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 136.0], [6.6, 136.0], [6.7, 136.0], [6.8, 136.0], [6.9, 136.0], [7.0, 149.0], [7.1, 149.0], [7.2, 149.0], [7.3, 149.0], [7.4, 149.0], [7.5, 149.0], [7.6, 149.0], [7.7, 149.0], [7.8, 149.0], [7.9, 149.0], [8.0, 150.0], [8.1, 150.0], [8.2, 150.0], [8.3, 150.0], [8.4, 150.0], [8.5, 150.0], [8.6, 150.0], [8.7, 150.0], [8.8, 150.0], [8.9, 150.0], [9.0, 150.0], [9.1, 150.0], [9.2, 150.0], [9.3, 150.0], [9.4, 150.0], [9.5, 150.0], [9.6, 150.0], [9.7, 150.0], [9.8, 150.0], [9.9, 150.0], [10.0, 152.0], [10.1, 152.0], [10.2, 152.0], [10.3, 152.0], [10.4, 152.0], [10.5, 152.0], [10.6, 152.0], [10.7, 152.0], [10.8, 152.0], [10.9, 152.0], [11.0, 152.0], [11.1, 152.0], [11.2, 152.0], [11.3, 152.0], [11.4, 152.0], [11.5, 152.0], [11.6, 152.0], [11.7, 152.0], [11.8, 152.0], [11.9, 152.0], [12.0, 152.0], [12.1, 152.0], [12.2, 152.0], [12.3, 152.0], [12.4, 152.0], [12.5, 152.0], [12.6, 152.0], [12.7, 152.0], [12.8, 152.0], [12.9, 152.0], [13.0, 154.0], [13.1, 154.0], [13.2, 154.0], [13.3, 154.0], [13.4, 154.0], [13.5, 154.0], [13.6, 154.0], [13.7, 154.0], [13.8, 154.0], [13.9, 154.0], [14.0, 164.0], [14.1, 164.0], [14.2, 164.0], [14.3, 164.0], [14.4, 164.0], [14.5, 164.0], [14.6, 164.0], [14.7, 164.0], [14.8, 164.0], [14.9, 164.0], [15.0, 165.0], [15.1, 165.0], [15.2, 165.0], [15.3, 165.0], [15.4, 165.0], [15.5, 165.0], [15.6, 165.0], [15.7, 165.0], [15.8, 165.0], [15.9, 165.0], [16.0, 167.0], [16.1, 167.0], [16.2, 167.0], [16.3, 167.0], [16.4, 167.0], [16.5, 167.0], [16.6, 167.0], [16.7, 167.0], [16.8, 167.0], [16.9, 167.0], [17.0, 170.0], [17.1, 170.0], [17.2, 170.0], [17.3, 170.0], [17.4, 170.0], [17.5, 170.0], [17.6, 170.0], [17.7, 170.0], [17.8, 170.0], [17.9, 170.0], [18.0, 174.0], [18.1, 174.0], [18.2, 174.0], [18.3, 174.0], [18.4, 174.0], [18.5, 174.0], [18.6, 174.0], [18.7, 174.0], [18.8, 174.0], [18.9, 174.0], [19.0, 175.0], [19.1, 175.0], [19.2, 175.0], [19.3, 175.0], [19.4, 175.0], [19.5, 175.0], [19.6, 175.0], [19.7, 175.0], [19.8, 175.0], [19.9, 175.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 176.0], [20.4, 176.0], [20.5, 176.0], [20.6, 176.0], [20.7, 176.0], [20.8, 176.0], [20.9, 176.0], [21.0, 176.0], [21.1, 176.0], [21.2, 176.0], [21.3, 176.0], [21.4, 176.0], [21.5, 176.0], [21.6, 176.0], [21.7, 176.0], [21.8, 176.0], [21.9, 176.0], [22.0, 179.0], [22.1, 179.0], [22.2, 179.0], [22.3, 179.0], [22.4, 179.0], [22.5, 179.0], [22.6, 179.0], [22.7, 179.0], [22.8, 179.0], [22.9, 179.0], [23.0, 179.0], [23.1, 179.0], [23.2, 179.0], [23.3, 179.0], [23.4, 179.0], [23.5, 179.0], [23.6, 179.0], [23.7, 179.0], [23.8, 179.0], [23.9, 179.0], [24.0, 183.0], [24.1, 183.0], [24.2, 183.0], [24.3, 183.0], [24.4, 183.0], [24.5, 183.0], [24.6, 183.0], [24.7, 183.0], [24.8, 183.0], [24.9, 183.0], [25.0, 183.0], [25.1, 183.0], [25.2, 183.0], [25.3, 183.0], [25.4, 183.0], [25.5, 183.0], [25.6, 183.0], [25.7, 183.0], [25.8, 183.0], [25.9, 183.0], [26.0, 184.0], [26.1, 184.0], [26.2, 184.0], [26.3, 184.0], [26.4, 184.0], [26.5, 184.0], [26.6, 184.0], [26.7, 184.0], [26.8, 184.0], [26.9, 184.0], [27.0, 187.0], [27.1, 187.0], [27.2, 187.0], [27.3, 187.0], [27.4, 187.0], [27.5, 187.0], [27.6, 187.0], [27.7, 187.0], [27.8, 187.0], [27.9, 187.0], [28.0, 188.0], [28.1, 188.0], [28.2, 188.0], [28.3, 188.0], [28.4, 188.0], [28.5, 188.0], [28.6, 188.0], [28.7, 188.0], [28.8, 188.0], [28.9, 188.0], [29.0, 190.0], [29.1, 190.0], [29.2, 190.0], [29.3, 190.0], [29.4, 190.0], [29.5, 190.0], [29.6, 190.0], [29.7, 190.0], [29.8, 190.0], [29.9, 190.0], [30.0, 191.0], [30.1, 191.0], [30.2, 191.0], [30.3, 191.0], [30.4, 191.0], [30.5, 191.0], [30.6, 191.0], [30.7, 191.0], [30.8, 191.0], [30.9, 191.0], [31.0, 199.0], [31.1, 199.0], [31.2, 199.0], [31.3, 199.0], [31.4, 199.0], [31.5, 199.0], [31.6, 199.0], [31.7, 199.0], [31.8, 199.0], [31.9, 199.0], [32.0, 200.0], [32.1, 200.0], [32.2, 200.0], [32.3, 200.0], [32.4, 200.0], [32.5, 200.0], [32.6, 200.0], [32.7, 200.0], [32.8, 200.0], [32.9, 200.0], [33.0, 202.0], [33.1, 202.0], [33.2, 202.0], [33.3, 202.0], [33.4, 202.0], [33.5, 202.0], [33.6, 202.0], [33.7, 202.0], [33.8, 202.0], [33.9, 202.0], [34.0, 203.0], [34.1, 203.0], [34.2, 203.0], [34.3, 203.0], [34.4, 203.0], [34.5, 203.0], [34.6, 203.0], [34.7, 203.0], [34.8, 203.0], [34.9, 203.0], [35.0, 205.0], [35.1, 205.0], [35.2, 205.0], [35.3, 205.0], [35.4, 205.0], [35.5, 205.0], [35.6, 205.0], [35.7, 205.0], [35.8, 205.0], [35.9, 205.0], [36.0, 206.0], [36.1, 206.0], [36.2, 206.0], [36.3, 206.0], [36.4, 206.0], [36.5, 206.0], [36.6, 206.0], [36.7, 206.0], [36.8, 206.0], [36.9, 206.0], [37.0, 207.0], [37.1, 207.0], [37.2, 207.0], [37.3, 207.0], [37.4, 207.0], [37.5, 207.0], [37.6, 207.0], [37.7, 207.0], [37.8, 207.0], [37.9, 207.0], [38.0, 208.0], [38.1, 208.0], [38.2, 208.0], [38.3, 208.0], [38.4, 208.0], [38.5, 208.0], [38.6, 208.0], [38.7, 208.0], [38.8, 208.0], [38.9, 208.0], [39.0, 210.0], [39.1, 210.0], [39.2, 210.0], [39.3, 210.0], [39.4, 210.0], [39.5, 210.0], [39.6, 210.0], [39.7, 210.0], [39.8, 210.0], [39.9, 210.0], [40.0, 211.0], [40.1, 211.0], [40.2, 211.0], [40.3, 211.0], [40.4, 211.0], [40.5, 211.0], [40.6, 211.0], [40.7, 211.0], [40.8, 211.0], [40.9, 211.0], [41.0, 211.0], [41.1, 211.0], [41.2, 211.0], [41.3, 211.0], [41.4, 211.0], [41.5, 211.0], [41.6, 211.0], [41.7, 211.0], [41.8, 211.0], [41.9, 211.0], [42.0, 211.0], [42.1, 211.0], [42.2, 211.0], [42.3, 211.0], [42.4, 211.0], [42.5, 211.0], [42.6, 211.0], [42.7, 211.0], [42.8, 211.0], [42.9, 211.0], [43.0, 212.0], [43.1, 212.0], [43.2, 212.0], [43.3, 212.0], [43.4, 212.0], [43.5, 212.0], [43.6, 212.0], [43.7, 212.0], [43.8, 212.0], [43.9, 212.0], [44.0, 212.0], [44.1, 212.0], [44.2, 212.0], [44.3, 212.0], [44.4, 212.0], [44.5, 212.0], [44.6, 212.0], [44.7, 212.0], [44.8, 212.0], [44.9, 212.0], [45.0, 214.0], [45.1, 214.0], [45.2, 214.0], [45.3, 214.0], [45.4, 214.0], [45.5, 214.0], [45.6, 214.0], [45.7, 214.0], [45.8, 214.0], [45.9, 214.0], [46.0, 214.0], [46.1, 214.0], [46.2, 214.0], [46.3, 214.0], [46.4, 214.0], [46.5, 214.0], [46.6, 214.0], [46.7, 214.0], [46.8, 214.0], [46.9, 214.0], [47.0, 215.0], [47.1, 215.0], [47.2, 215.0], [47.3, 215.0], [47.4, 215.0], [47.5, 215.0], [47.6, 215.0], [47.7, 215.0], [47.8, 215.0], [47.9, 215.0], [48.0, 216.0], [48.1, 216.0], [48.2, 216.0], [48.3, 216.0], [48.4, 216.0], [48.5, 216.0], [48.6, 216.0], [48.7, 216.0], [48.8, 216.0], [48.9, 216.0], [49.0, 220.0], [49.1, 220.0], [49.2, 220.0], [49.3, 220.0], [49.4, 220.0], [49.5, 220.0], [49.6, 220.0], [49.7, 220.0], [49.8, 220.0], [49.9, 220.0], [50.0, 220.0], [50.1, 220.0], [50.2, 220.0], [50.3, 220.0], [50.4, 220.0], [50.5, 220.0], [50.6, 220.0], [50.7, 220.0], [50.8, 220.0], [50.9, 220.0], [51.0, 222.0], [51.1, 222.0], [51.2, 222.0], [51.3, 222.0], [51.4, 222.0], [51.5, 222.0], [51.6, 222.0], [51.7, 222.0], [51.8, 222.0], [51.9, 222.0], [52.0, 225.0], [52.1, 225.0], [52.2, 225.0], [52.3, 225.0], [52.4, 225.0], [52.5, 225.0], [52.6, 225.0], [52.7, 225.0], [52.8, 225.0], [52.9, 225.0], [53.0, 225.0], [53.1, 225.0], [53.2, 225.0], [53.3, 225.0], [53.4, 225.0], [53.5, 225.0], [53.6, 225.0], [53.7, 225.0], [53.8, 225.0], [53.9, 225.0], [54.0, 227.0], [54.1, 227.0], [54.2, 227.0], [54.3, 227.0], [54.4, 227.0], [54.5, 227.0], [54.6, 227.0], [54.7, 227.0], [54.8, 227.0], [54.9, 227.0], [55.0, 229.0], [55.1, 229.0], [55.2, 229.0], [55.3, 229.0], [55.4, 229.0], [55.5, 229.0], [55.6, 229.0], [55.7, 229.0], [55.8, 229.0], [55.9, 229.0], [56.0, 233.0], [56.1, 233.0], [56.2, 233.0], [56.3, 233.0], [56.4, 233.0], [56.5, 233.0], [56.6, 233.0], [56.7, 233.0], [56.8, 233.0], [56.9, 233.0], [57.0, 234.0], [57.1, 234.0], [57.2, 234.0], [57.3, 234.0], [57.4, 234.0], [57.5, 234.0], [57.6, 234.0], [57.7, 234.0], [57.8, 234.0], [57.9, 234.0], [58.0, 236.0], [58.1, 236.0], [58.2, 236.0], [58.3, 236.0], [58.4, 236.0], [58.5, 236.0], [58.6, 236.0], [58.7, 236.0], [58.8, 236.0], [58.9, 236.0], [59.0, 237.0], [59.1, 237.0], [59.2, 237.0], [59.3, 237.0], [59.4, 237.0], [59.5, 237.0], [59.6, 237.0], [59.7, 237.0], [59.8, 237.0], [59.9, 237.0], [60.0, 238.0], [60.1, 238.0], [60.2, 238.0], [60.3, 238.0], [60.4, 238.0], [60.5, 238.0], [60.6, 238.0], [60.7, 238.0], [60.8, 238.0], [60.9, 238.0], [61.0, 240.0], [61.1, 240.0], [61.2, 240.0], [61.3, 240.0], [61.4, 240.0], [61.5, 240.0], [61.6, 240.0], [61.7, 240.0], [61.8, 240.0], [61.9, 240.0], [62.0, 246.0], [62.1, 246.0], [62.2, 246.0], [62.3, 246.0], [62.4, 246.0], [62.5, 246.0], [62.6, 246.0], [62.7, 246.0], [62.8, 246.0], [62.9, 246.0], [63.0, 246.0], [63.1, 246.0], [63.2, 246.0], [63.3, 246.0], [63.4, 246.0], [63.5, 246.0], [63.6, 246.0], [63.7, 246.0], [63.8, 246.0], [63.9, 246.0], [64.0, 247.0], [64.1, 247.0], [64.2, 247.0], [64.3, 247.0], [64.4, 247.0], [64.5, 247.0], [64.6, 247.0], [64.7, 247.0], [64.8, 247.0], [64.9, 247.0], [65.0, 250.0], [65.1, 250.0], [65.2, 250.0], [65.3, 250.0], [65.4, 250.0], [65.5, 250.0], [65.6, 250.0], [65.7, 250.0], [65.8, 250.0], [65.9, 250.0], [66.0, 250.0], [66.1, 250.0], [66.2, 250.0], [66.3, 250.0], [66.4, 250.0], [66.5, 250.0], [66.6, 250.0], [66.7, 250.0], [66.8, 250.0], [66.9, 250.0], [67.0, 256.0], [67.1, 256.0], [67.2, 256.0], [67.3, 256.0], [67.4, 256.0], [67.5, 256.0], [67.6, 256.0], [67.7, 256.0], [67.8, 256.0], [67.9, 256.0], [68.0, 262.0], [68.1, 262.0], [68.2, 262.0], [68.3, 262.0], [68.4, 262.0], [68.5, 262.0], [68.6, 262.0], [68.7, 262.0], [68.8, 262.0], [68.9, 262.0], [69.0, 268.0], [69.1, 268.0], [69.2, 268.0], [69.3, 268.0], [69.4, 268.0], [69.5, 268.0], [69.6, 268.0], [69.7, 268.0], [69.8, 268.0], [69.9, 268.0], [70.0, 275.0], [70.1, 275.0], [70.2, 275.0], [70.3, 275.0], [70.4, 275.0], [70.5, 275.0], [70.6, 275.0], [70.7, 275.0], [70.8, 275.0], [70.9, 275.0], [71.0, 276.0], [71.1, 276.0], [71.2, 276.0], [71.3, 276.0], [71.4, 276.0], [71.5, 276.0], [71.6, 276.0], [71.7, 276.0], [71.8, 276.0], [71.9, 276.0], [72.0, 287.0], [72.1, 287.0], [72.2, 287.0], [72.3, 287.0], [72.4, 287.0], [72.5, 287.0], [72.6, 287.0], [72.7, 287.0], [72.8, 287.0], [72.9, 287.0], [73.0, 290.0], [73.1, 290.0], [73.2, 290.0], [73.3, 290.0], [73.4, 290.0], [73.5, 290.0], [73.6, 290.0], [73.7, 290.0], [73.8, 290.0], [73.9, 290.0], [74.0, 292.0], [74.1, 292.0], [74.2, 292.0], [74.3, 292.0], [74.4, 292.0], [74.5, 292.0], [74.6, 292.0], [74.7, 292.0], [74.8, 292.0], [74.9, 292.0], [75.0, 297.0], [75.1, 297.0], [75.2, 297.0], [75.3, 297.0], [75.4, 297.0], [75.5, 297.0], [75.6, 297.0], [75.7, 297.0], [75.8, 297.0], [75.9, 297.0], [76.0, 303.0], [76.1, 303.0], [76.2, 303.0], [76.3, 303.0], [76.4, 303.0], [76.5, 303.0], [76.6, 303.0], [76.7, 303.0], [76.8, 303.0], [76.9, 303.0], [77.0, 304.0], [77.1, 304.0], [77.2, 304.0], [77.3, 304.0], [77.4, 304.0], [77.5, 304.0], [77.6, 304.0], [77.7, 304.0], [77.8, 304.0], [77.9, 304.0], [78.0, 304.0], [78.1, 304.0], [78.2, 304.0], [78.3, 304.0], [78.4, 304.0], [78.5, 304.0], [78.6, 304.0], [78.7, 304.0], [78.8, 304.0], [78.9, 304.0], [79.0, 306.0], [79.1, 306.0], [79.2, 306.0], [79.3, 306.0], [79.4, 306.0], [79.5, 306.0], [79.6, 306.0], [79.7, 306.0], [79.8, 306.0], [79.9, 306.0], [80.0, 319.0], [80.1, 319.0], [80.2, 319.0], [80.3, 319.0], [80.4, 319.0], [80.5, 319.0], [80.6, 319.0], [80.7, 319.0], [80.8, 319.0], [80.9, 319.0], [81.0, 326.0], [81.1, 326.0], [81.2, 326.0], [81.3, 326.0], [81.4, 326.0], [81.5, 326.0], [81.6, 326.0], [81.7, 326.0], [81.8, 326.0], [81.9, 326.0], [82.0, 328.0], [82.1, 328.0], [82.2, 328.0], [82.3, 328.0], [82.4, 328.0], [82.5, 328.0], [82.6, 328.0], [82.7, 328.0], [82.8, 328.0], [82.9, 328.0], [83.0, 350.0], [83.1, 350.0], [83.2, 350.0], [83.3, 350.0], [83.4, 350.0], [83.5, 350.0], [83.6, 350.0], [83.7, 350.0], [83.8, 350.0], [83.9, 350.0], [84.0, 356.0], [84.1, 356.0], [84.2, 356.0], [84.3, 356.0], [84.4, 356.0], [84.5, 356.0], [84.6, 356.0], [84.7, 356.0], [84.8, 356.0], [84.9, 356.0], [85.0, 419.0], [85.1, 419.0], [85.2, 419.0], [85.3, 419.0], [85.4, 419.0], [85.5, 419.0], [85.6, 419.0], [85.7, 419.0], [85.8, 419.0], [85.9, 419.0], [86.0, 462.0], [86.1, 462.0], [86.2, 462.0], [86.3, 462.0], [86.4, 462.0], [86.5, 462.0], [86.6, 462.0], [86.7, 462.0], [86.8, 462.0], [86.9, 462.0], [87.0, 464.0], [87.1, 464.0], [87.2, 464.0], [87.3, 464.0], [87.4, 464.0], [87.5, 464.0], [87.6, 464.0], [87.7, 464.0], [87.8, 464.0], [87.9, 464.0], [88.0, 507.0], [88.1, 507.0], [88.2, 507.0], [88.3, 507.0], [88.4, 507.0], [88.5, 507.0], [88.6, 507.0], [88.7, 507.0], [88.8, 507.0], [88.9, 507.0], [89.0, 545.0], [89.1, 545.0], [89.2, 545.0], [89.3, 545.0], [89.4, 545.0], [89.5, 545.0], [89.6, 545.0], [89.7, 545.0], [89.8, 545.0], [89.9, 545.0], [90.0, 685.0], [90.1, 685.0], [90.2, 685.0], [90.3, 685.0], [90.4, 685.0], [90.5, 685.0], [90.6, 685.0], [90.7, 685.0], [90.8, 685.0], [90.9, 685.0], [91.0, 1159.0], [91.1, 1159.0], [91.2, 1159.0], [91.3, 1159.0], [91.4, 1159.0], [91.5, 1159.0], [91.6, 1159.0], [91.7, 1159.0], [91.8, 1159.0], [91.9, 1159.0], [92.0, 1270.0], [92.1, 1270.0], [92.2, 1270.0], [92.3, 1270.0], [92.4, 1270.0], [92.5, 1270.0], [92.6, 1270.0], [92.7, 1270.0], [92.8, 1270.0], [92.9, 1270.0], [93.0, 1298.0], [93.1, 1298.0], [93.2, 1298.0], [93.3, 1298.0], [93.4, 1298.0], [93.5, 1298.0], [93.6, 1298.0], [93.7, 1298.0], [93.8, 1298.0], [93.9, 1298.0], [94.0, 3181.0], [94.1, 3181.0], [94.2, 3181.0], [94.3, 3181.0], [94.4, 3181.0], [94.5, 3181.0], [94.6, 3181.0], [94.7, 3181.0], [94.8, 3181.0], [94.9, 3181.0], [95.0, 3194.0], [95.1, 3194.0], [95.2, 3194.0], [95.3, 3194.0], [95.4, 3194.0], [95.5, 3194.0], [95.6, 3194.0], [95.7, 3194.0], [95.8, 3194.0], [95.9, 3194.0], [96.0, 3234.0], [96.1, 3234.0], [96.2, 3234.0], [96.3, 3234.0], [96.4, 3234.0], [96.5, 3234.0], [96.6, 3234.0], [96.7, 3234.0], [96.8, 3234.0], [96.9, 3234.0], [97.0, 3444.0], [97.1, 3444.0], [97.2, 3444.0], [97.3, 3444.0], [97.4, 3444.0], [97.5, 3444.0], [97.6, 3444.0], [97.7, 3444.0], [97.8, 3444.0], [97.9, 3444.0], [98.0, 3509.0], [98.1, 3509.0], [98.2, 3509.0], [98.3, 3509.0], [98.4, 3509.0], [98.5, 3509.0], [98.6, 3509.0], [98.7, 3509.0], [98.8, 3509.0], [98.9, 3509.0], [99.0, 9107.0], [99.1, 9107.0], [99.2, 9107.0], [99.3, 9107.0], [99.4, 9107.0], [99.5, 9107.0], [99.6, 9107.0], [99.7, 9107.0], [99.8, 9107.0], [99.9, 9107.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 1421.0], [0.1, 1421.0], [0.2, 1421.0], [0.3, 1421.0], [0.4, 1421.0], [0.5, 1421.0], [0.6, 1421.0], [0.7, 1421.0], [0.8, 1421.0], [0.9, 1421.0], [1.0, 1655.0], [1.1, 1655.0], [1.2, 1655.0], [1.3, 1655.0], [1.4, 1655.0], [1.5, 1655.0], [1.6, 1655.0], [1.7, 1655.0], [1.8, 1655.0], [1.9, 1655.0], [2.0, 2358.0], [2.1, 2358.0], [2.2, 2358.0], [2.3, 2358.0], [2.4, 2358.0], [2.5, 2358.0], [2.6, 2358.0], [2.7, 2358.0], [2.8, 2358.0], [2.9, 2358.0], [3.0, 2537.0], [3.1, 2537.0], [3.2, 2537.0], [3.3, 2537.0], [3.4, 2537.0], [3.5, 2537.0], [3.6, 2537.0], [3.7, 2537.0], [3.8, 2537.0], [3.9, 2537.0], [4.0, 2750.0], [4.1, 2750.0], [4.2, 2750.0], [4.3, 2750.0], [4.4, 2750.0], [4.5, 2750.0], [4.6, 2750.0], [4.7, 2750.0], [4.8, 2750.0], [4.9, 2750.0], [5.0, 2866.0], [5.1, 2866.0], [5.2, 2866.0], [5.3, 2866.0], [5.4, 2866.0], [5.5, 2866.0], [5.6, 2866.0], [5.7, 2866.0], [5.8, 2866.0], [5.9, 2866.0], [6.0, 3127.0], [6.1, 3127.0], [6.2, 3127.0], [6.3, 3127.0], [6.4, 3127.0], [6.5, 3127.0], [6.6, 3127.0], [6.7, 3127.0], [6.8, 3127.0], [6.9, 3127.0], [7.0, 3186.0], [7.1, 3186.0], [7.2, 3186.0], [7.3, 3186.0], [7.4, 3186.0], [7.5, 3186.0], [7.6, 3186.0], [7.7, 3186.0], [7.8, 3186.0], [7.9, 3186.0], [8.0, 3261.0], [8.1, 3261.0], [8.2, 3261.0], [8.3, 3261.0], [8.4, 3261.0], [8.5, 3261.0], [8.6, 3261.0], [8.7, 3261.0], [8.8, 3261.0], [8.9, 3261.0], [9.0, 3414.0], [9.1, 3414.0], [9.2, 3414.0], [9.3, 3414.0], [9.4, 3414.0], [9.5, 3414.0], [9.6, 3414.0], [9.7, 3414.0], [9.8, 3414.0], [9.9, 3414.0], [10.0, 3509.0], [10.1, 3509.0], [10.2, 3509.0], [10.3, 3509.0], [10.4, 3509.0], [10.5, 3509.0], [10.6, 3509.0], [10.7, 3509.0], [10.8, 3509.0], [10.9, 3509.0], [11.0, 3546.0], [11.1, 3546.0], [11.2, 3546.0], [11.3, 3546.0], [11.4, 3546.0], [11.5, 3546.0], [11.6, 3546.0], [11.7, 3546.0], [11.8, 3546.0], [11.9, 3546.0], [12.0, 3623.0], [12.1, 3623.0], [12.2, 3623.0], [12.3, 3623.0], [12.4, 3623.0], [12.5, 3623.0], [12.6, 3623.0], [12.7, 3623.0], [12.8, 3623.0], [12.9, 3623.0], [13.0, 3832.0], [13.1, 3832.0], [13.2, 3832.0], [13.3, 3832.0], [13.4, 3832.0], [13.5, 3832.0], [13.6, 3832.0], [13.7, 3832.0], [13.8, 3832.0], [13.9, 3832.0], [14.0, 3849.0], [14.1, 3849.0], [14.2, 3849.0], [14.3, 3849.0], [14.4, 3849.0], [14.5, 3849.0], [14.6, 3849.0], [14.7, 3849.0], [14.8, 3849.0], [14.9, 3849.0], [15.0, 3971.0], [15.1, 3971.0], [15.2, 3971.0], [15.3, 3971.0], [15.4, 3971.0], [15.5, 3971.0], [15.6, 3971.0], [15.7, 3971.0], [15.8, 3971.0], [15.9, 3971.0], [16.0, 4006.0], [16.1, 4006.0], [16.2, 4006.0], [16.3, 4006.0], [16.4, 4006.0], [16.5, 4006.0], [16.6, 4006.0], [16.7, 4006.0], [16.8, 4006.0], [16.9, 4006.0], [17.0, 4062.0], [17.1, 4062.0], [17.2, 4062.0], [17.3, 4062.0], [17.4, 4062.0], [17.5, 4062.0], [17.6, 4062.0], [17.7, 4062.0], [17.8, 4062.0], [17.9, 4062.0], [18.0, 4076.0], [18.1, 4076.0], [18.2, 4076.0], [18.3, 4076.0], [18.4, 4076.0], [18.5, 4076.0], [18.6, 4076.0], [18.7, 4076.0], [18.8, 4076.0], [18.9, 4076.0], [19.0, 4211.0], [19.1, 4211.0], [19.2, 4211.0], [19.3, 4211.0], [19.4, 4211.0], [19.5, 4211.0], [19.6, 4211.0], [19.7, 4211.0], [19.8, 4211.0], [19.9, 4211.0], [20.0, 4906.0], [20.1, 4906.0], [20.2, 4906.0], [20.3, 4906.0], [20.4, 4906.0], [20.5, 4906.0], [20.6, 4906.0], [20.7, 4906.0], [20.8, 4906.0], [20.9, 4906.0], [21.0, 4977.0], [21.1, 4977.0], [21.2, 4977.0], [21.3, 4977.0], [21.4, 4977.0], [21.5, 4977.0], [21.6, 4977.0], [21.7, 4977.0], [21.8, 4977.0], [21.9, 4977.0], [22.0, 5250.0], [22.1, 5250.0], [22.2, 5250.0], [22.3, 5250.0], [22.4, 5250.0], [22.5, 5250.0], [22.6, 5250.0], [22.7, 5250.0], [22.8, 5250.0], [22.9, 5250.0], [23.0, 5335.0], [23.1, 5335.0], [23.2, 5335.0], [23.3, 5335.0], [23.4, 5335.0], [23.5, 5335.0], [23.6, 5335.0], [23.7, 5335.0], [23.8, 5335.0], [23.9, 5335.0], [24.0, 5360.0], [24.1, 5360.0], [24.2, 5360.0], [24.3, 5360.0], [24.4, 5360.0], [24.5, 5360.0], [24.6, 5360.0], [24.7, 5360.0], [24.8, 5360.0], [24.9, 5360.0], [25.0, 5412.0], [25.1, 5412.0], [25.2, 5412.0], [25.3, 5412.0], [25.4, 5412.0], [25.5, 5412.0], [25.6, 5412.0], [25.7, 5412.0], [25.8, 5412.0], [25.9, 5412.0], [26.0, 5458.0], [26.1, 5458.0], [26.2, 5458.0], [26.3, 5458.0], [26.4, 5458.0], [26.5, 5458.0], [26.6, 5458.0], [26.7, 5458.0], [26.8, 5458.0], [26.9, 5458.0], [27.0, 5563.0], [27.1, 5563.0], [27.2, 5563.0], [27.3, 5563.0], [27.4, 5563.0], [27.5, 5563.0], [27.6, 5563.0], [27.7, 5563.0], [27.8, 5563.0], [27.9, 5563.0], [28.0, 5670.0], [28.1, 5670.0], [28.2, 5670.0], [28.3, 5670.0], [28.4, 5670.0], [28.5, 5670.0], [28.6, 5670.0], [28.7, 5670.0], [28.8, 5670.0], [28.9, 5670.0], [29.0, 5717.0], [29.1, 5717.0], [29.2, 5717.0], [29.3, 5717.0], [29.4, 5717.0], [29.5, 5717.0], [29.6, 5717.0], [29.7, 5717.0], [29.8, 5717.0], [29.9, 5717.0], [30.0, 5744.0], [30.1, 5744.0], [30.2, 5744.0], [30.3, 5744.0], [30.4, 5744.0], [30.5, 5744.0], [30.6, 5744.0], [30.7, 5744.0], [30.8, 5744.0], [30.9, 5744.0], [31.0, 5802.0], [31.1, 5802.0], [31.2, 5802.0], [31.3, 5802.0], [31.4, 5802.0], [31.5, 5802.0], [31.6, 5802.0], [31.7, 5802.0], [31.8, 5802.0], [31.9, 5802.0], [32.0, 5835.0], [32.1, 5835.0], [32.2, 5835.0], [32.3, 5835.0], [32.4, 5835.0], [32.5, 5835.0], [32.6, 5835.0], [32.7, 5835.0], [32.8, 5835.0], [32.9, 5835.0], [33.0, 5912.0], [33.1, 5912.0], [33.2, 5912.0], [33.3, 5912.0], [33.4, 5912.0], [33.5, 5912.0], [33.6, 5912.0], [33.7, 5912.0], [33.8, 5912.0], [33.9, 5912.0], [34.0, 6046.0], [34.1, 6046.0], [34.2, 6046.0], [34.3, 6046.0], [34.4, 6046.0], [34.5, 6046.0], [34.6, 6046.0], [34.7, 6046.0], [34.8, 6046.0], [34.9, 6046.0], [35.0, 6076.0], [35.1, 6076.0], [35.2, 6076.0], [35.3, 6076.0], [35.4, 6076.0], [35.5, 6076.0], [35.6, 6076.0], [35.7, 6076.0], [35.8, 6076.0], [35.9, 6076.0], [36.0, 6103.0], [36.1, 6103.0], [36.2, 6103.0], [36.3, 6103.0], [36.4, 6103.0], [36.5, 6103.0], [36.6, 6103.0], [36.7, 6103.0], [36.8, 6103.0], [36.9, 6103.0], [37.0, 6124.0], [37.1, 6124.0], [37.2, 6124.0], [37.3, 6124.0], [37.4, 6124.0], [37.5, 6124.0], [37.6, 6124.0], [37.7, 6124.0], [37.8, 6124.0], [37.9, 6124.0], [38.0, 6214.0], [38.1, 6214.0], [38.2, 6214.0], [38.3, 6214.0], [38.4, 6214.0], [38.5, 6214.0], [38.6, 6214.0], [38.7, 6214.0], [38.8, 6214.0], [38.9, 6214.0], [39.0, 6244.0], [39.1, 6244.0], [39.2, 6244.0], [39.3, 6244.0], [39.4, 6244.0], [39.5, 6244.0], [39.6, 6244.0], [39.7, 6244.0], [39.8, 6244.0], [39.9, 6244.0], [40.0, 6332.0], [40.1, 6332.0], [40.2, 6332.0], [40.3, 6332.0], [40.4, 6332.0], [40.5, 6332.0], [40.6, 6332.0], [40.7, 6332.0], [40.8, 6332.0], [40.9, 6332.0], [41.0, 6439.0], [41.1, 6439.0], [41.2, 6439.0], [41.3, 6439.0], [41.4, 6439.0], [41.5, 6439.0], [41.6, 6439.0], [41.7, 6439.0], [41.8, 6439.0], [41.9, 6439.0], [42.0, 6497.0], [42.1, 6497.0], [42.2, 6497.0], [42.3, 6497.0], [42.4, 6497.0], [42.5, 6497.0], [42.6, 6497.0], [42.7, 6497.0], [42.8, 6497.0], [42.9, 6497.0], [43.0, 6555.0], [43.1, 6555.0], [43.2, 6555.0], [43.3, 6555.0], [43.4, 6555.0], [43.5, 6555.0], [43.6, 6555.0], [43.7, 6555.0], [43.8, 6555.0], [43.9, 6555.0], [44.0, 6659.0], [44.1, 6659.0], [44.2, 6659.0], [44.3, 6659.0], [44.4, 6659.0], [44.5, 6659.0], [44.6, 6659.0], [44.7, 6659.0], [44.8, 6659.0], [44.9, 6659.0], [45.0, 6970.0], [45.1, 6970.0], [45.2, 6970.0], [45.3, 6970.0], [45.4, 6970.0], [45.5, 6970.0], [45.6, 6970.0], [45.7, 6970.0], [45.8, 6970.0], [45.9, 6970.0], [46.0, 7151.0], [46.1, 7151.0], [46.2, 7151.0], [46.3, 7151.0], [46.4, 7151.0], [46.5, 7151.0], [46.6, 7151.0], [46.7, 7151.0], [46.8, 7151.0], [46.9, 7151.0], [47.0, 7307.0], [47.1, 7307.0], [47.2, 7307.0], [47.3, 7307.0], [47.4, 7307.0], [47.5, 7307.0], [47.6, 7307.0], [47.7, 7307.0], [47.8, 7307.0], [47.9, 7307.0], [48.0, 7470.0], [48.1, 7470.0], [48.2, 7470.0], [48.3, 7470.0], [48.4, 7470.0], [48.5, 7470.0], [48.6, 7470.0], [48.7, 7470.0], [48.8, 7470.0], [48.9, 7470.0], [49.0, 7481.0], [49.1, 7481.0], [49.2, 7481.0], [49.3, 7481.0], [49.4, 7481.0], [49.5, 7481.0], [49.6, 7481.0], [49.7, 7481.0], [49.8, 7481.0], [49.9, 7481.0], [50.0, 7503.0], [50.1, 7503.0], [50.2, 7503.0], [50.3, 7503.0], [50.4, 7503.0], [50.5, 7503.0], [50.6, 7503.0], [50.7, 7503.0], [50.8, 7503.0], [50.9, 7503.0], [51.0, 7506.0], [51.1, 7506.0], [51.2, 7506.0], [51.3, 7506.0], [51.4, 7506.0], [51.5, 7506.0], [51.6, 7506.0], [51.7, 7506.0], [51.8, 7506.0], [51.9, 7506.0], [52.0, 7510.0], [52.1, 7510.0], [52.2, 7510.0], [52.3, 7510.0], [52.4, 7510.0], [52.5, 7510.0], [52.6, 7510.0], [52.7, 7510.0], [52.8, 7510.0], [52.9, 7510.0], [53.0, 7530.0], [53.1, 7530.0], [53.2, 7530.0], [53.3, 7530.0], [53.4, 7530.0], [53.5, 7530.0], [53.6, 7530.0], [53.7, 7530.0], [53.8, 7530.0], [53.9, 7530.0], [54.0, 7536.0], [54.1, 7536.0], [54.2, 7536.0], [54.3, 7536.0], [54.4, 7536.0], [54.5, 7536.0], [54.6, 7536.0], [54.7, 7536.0], [54.8, 7536.0], [54.9, 7536.0], [55.0, 7553.0], [55.1, 7553.0], [55.2, 7553.0], [55.3, 7553.0], [55.4, 7553.0], [55.5, 7553.0], [55.6, 7553.0], [55.7, 7553.0], [55.8, 7553.0], [55.9, 7553.0], [56.0, 7578.0], [56.1, 7578.0], [56.2, 7578.0], [56.3, 7578.0], [56.4, 7578.0], [56.5, 7578.0], [56.6, 7578.0], [56.7, 7578.0], [56.8, 7578.0], [56.9, 7578.0], [57.0, 7589.0], [57.1, 7589.0], [57.2, 7589.0], [57.3, 7589.0], [57.4, 7589.0], [57.5, 7589.0], [57.6, 7589.0], [57.7, 7589.0], [57.8, 7589.0], [57.9, 7589.0], [58.0, 7597.0], [58.1, 7597.0], [58.2, 7597.0], [58.3, 7597.0], [58.4, 7597.0], [58.5, 7597.0], [58.6, 7597.0], [58.7, 7597.0], [58.8, 7597.0], [58.9, 7597.0], [59.0, 7599.0], [59.1, 7599.0], [59.2, 7599.0], [59.3, 7599.0], [59.4, 7599.0], [59.5, 7599.0], [59.6, 7599.0], [59.7, 7599.0], [59.8, 7599.0], [59.9, 7599.0], [60.0, 7632.0], [60.1, 7632.0], [60.2, 7632.0], [60.3, 7632.0], [60.4, 7632.0], [60.5, 7632.0], [60.6, 7632.0], [60.7, 7632.0], [60.8, 7632.0], [60.9, 7632.0], [61.0, 7753.0], [61.1, 7753.0], [61.2, 7753.0], [61.3, 7753.0], [61.4, 7753.0], [61.5, 7753.0], [61.6, 7753.0], [61.7, 7753.0], [61.8, 7753.0], [61.9, 7753.0], [62.0, 7803.0], [62.1, 7803.0], [62.2, 7803.0], [62.3, 7803.0], [62.4, 7803.0], [62.5, 7803.0], [62.6, 7803.0], [62.7, 7803.0], [62.8, 7803.0], [62.9, 7803.0], [63.0, 7812.0], [63.1, 7812.0], [63.2, 7812.0], [63.3, 7812.0], [63.4, 7812.0], [63.5, 7812.0], [63.6, 7812.0], [63.7, 7812.0], [63.8, 7812.0], [63.9, 7812.0], [64.0, 7844.0], [64.1, 7844.0], [64.2, 7844.0], [64.3, 7844.0], [64.4, 7844.0], [64.5, 7844.0], [64.6, 7844.0], [64.7, 7844.0], [64.8, 7844.0], [64.9, 7844.0], [65.0, 8059.0], [65.1, 8059.0], [65.2, 8059.0], [65.3, 8059.0], [65.4, 8059.0], [65.5, 8059.0], [65.6, 8059.0], [65.7, 8059.0], [65.8, 8059.0], [65.9, 8059.0], [66.0, 8083.0], [66.1, 8083.0], [66.2, 8083.0], [66.3, 8083.0], [66.4, 8083.0], [66.5, 8083.0], [66.6, 8083.0], [66.7, 8083.0], [66.8, 8083.0], [66.9, 8083.0], [67.0, 8257.0], [67.1, 8257.0], [67.2, 8257.0], [67.3, 8257.0], [67.4, 8257.0], [67.5, 8257.0], [67.6, 8257.0], [67.7, 8257.0], [67.8, 8257.0], [67.9, 8257.0], [68.0, 8367.0], [68.1, 8367.0], [68.2, 8367.0], [68.3, 8367.0], [68.4, 8367.0], [68.5, 8367.0], [68.6, 8367.0], [68.7, 8367.0], [68.8, 8367.0], [68.9, 8367.0], [69.0, 8382.0], [69.1, 8382.0], [69.2, 8382.0], [69.3, 8382.0], [69.4, 8382.0], [69.5, 8382.0], [69.6, 8382.0], [69.7, 8382.0], [69.8, 8382.0], [69.9, 8382.0], [70.0, 8557.0], [70.1, 8557.0], [70.2, 8557.0], [70.3, 8557.0], [70.4, 8557.0], [70.5, 8557.0], [70.6, 8557.0], [70.7, 8557.0], [70.8, 8557.0], [70.9, 8557.0], [71.0, 8558.0], [71.1, 8558.0], [71.2, 8558.0], [71.3, 8558.0], [71.4, 8558.0], [71.5, 8558.0], [71.6, 8558.0], [71.7, 8558.0], [71.8, 8558.0], [71.9, 8558.0], [72.0, 8581.0], [72.1, 8581.0], [72.2, 8581.0], [72.3, 8581.0], [72.4, 8581.0], [72.5, 8581.0], [72.6, 8581.0], [72.7, 8581.0], [72.8, 8581.0], [72.9, 8581.0], [73.0, 8621.0], [73.1, 8621.0], [73.2, 8621.0], [73.3, 8621.0], [73.4, 8621.0], [73.5, 8621.0], [73.6, 8621.0], [73.7, 8621.0], [73.8, 8621.0], [73.9, 8621.0], [74.0, 8730.0], [74.1, 8730.0], [74.2, 8730.0], [74.3, 8730.0], [74.4, 8730.0], [74.5, 8730.0], [74.6, 8730.0], [74.7, 8730.0], [74.8, 8730.0], [74.9, 8730.0], [75.0, 8787.0], [75.1, 8787.0], [75.2, 8787.0], [75.3, 8787.0], [75.4, 8787.0], [75.5, 8787.0], [75.6, 8787.0], [75.7, 8787.0], [75.8, 8787.0], [75.9, 8787.0], [76.0, 8797.0], [76.1, 8797.0], [76.2, 8797.0], [76.3, 8797.0], [76.4, 8797.0], [76.5, 8797.0], [76.6, 8797.0], [76.7, 8797.0], [76.8, 8797.0], [76.9, 8797.0], [77.0, 8799.0], [77.1, 8799.0], [77.2, 8799.0], [77.3, 8799.0], [77.4, 8799.0], [77.5, 8799.0], [77.6, 8799.0], [77.7, 8799.0], [77.8, 8799.0], [77.9, 8799.0], [78.0, 8815.0], [78.1, 8815.0], [78.2, 8815.0], [78.3, 8815.0], [78.4, 8815.0], [78.5, 8815.0], [78.6, 8815.0], [78.7, 8815.0], [78.8, 8815.0], [78.9, 8815.0], [79.0, 9097.0], [79.1, 9097.0], [79.2, 9097.0], [79.3, 9097.0], [79.4, 9097.0], [79.5, 9097.0], [79.6, 9097.0], [79.7, 9097.0], [79.8, 9097.0], [79.9, 9097.0], [80.0, 9101.0], [80.1, 9101.0], [80.2, 9101.0], [80.3, 9101.0], [80.4, 9101.0], [80.5, 9101.0], [80.6, 9101.0], [80.7, 9101.0], [80.8, 9101.0], [80.9, 9101.0], [81.0, 9208.0], [81.1, 9208.0], [81.2, 9208.0], [81.3, 9208.0], [81.4, 9208.0], [81.5, 9208.0], [81.6, 9208.0], [81.7, 9208.0], [81.8, 9208.0], [81.9, 9208.0], [82.0, 9231.0], [82.1, 9231.0], [82.2, 9231.0], [82.3, 9231.0], [82.4, 9231.0], [82.5, 9231.0], [82.6, 9231.0], [82.7, 9231.0], [82.8, 9231.0], [82.9, 9231.0], [83.0, 9799.0], [83.1, 9799.0], [83.2, 9799.0], [83.3, 9799.0], [83.4, 9799.0], [83.5, 9799.0], [83.6, 9799.0], [83.7, 9799.0], [83.8, 9799.0], [83.9, 9799.0], [84.0, 9964.0], [84.1, 9964.0], [84.2, 9964.0], [84.3, 9964.0], [84.4, 9964.0], [84.5, 9964.0], [84.6, 9964.0], [84.7, 9964.0], [84.8, 9964.0], [84.9, 9964.0], [85.0, 10080.0], [85.1, 10080.0], [85.2, 10080.0], [85.3, 10080.0], [85.4, 10080.0], [85.5, 10080.0], [85.6, 10080.0], [85.7, 10080.0], [85.8, 10080.0], [85.9, 10080.0], [86.0, 10128.0], [86.1, 10128.0], [86.2, 10128.0], [86.3, 10128.0], [86.4, 10128.0], [86.5, 10128.0], [86.6, 10128.0], [86.7, 10128.0], [86.8, 10128.0], [86.9, 10128.0], [87.0, 10248.0], [87.1, 10248.0], [87.2, 10248.0], [87.3, 10248.0], [87.4, 10248.0], [87.5, 10248.0], [87.6, 10248.0], [87.7, 10248.0], [87.8, 10248.0], [87.9, 10248.0], [88.0, 10258.0], [88.1, 10258.0], [88.2, 10258.0], [88.3, 10258.0], [88.4, 10258.0], [88.5, 10258.0], [88.6, 10258.0], [88.7, 10258.0], [88.8, 10258.0], [88.9, 10258.0], [89.0, 10827.0], [89.1, 10827.0], [89.2, 10827.0], [89.3, 10827.0], [89.4, 10827.0], [89.5, 10827.0], [89.6, 10827.0], [89.7, 10827.0], [89.8, 10827.0], [89.9, 10827.0], [90.0, 10835.0], [90.1, 10835.0], [90.2, 10835.0], [90.3, 10835.0], [90.4, 10835.0], [90.5, 10835.0], [90.6, 10835.0], [90.7, 10835.0], [90.8, 10835.0], [90.9, 10835.0], [91.0, 10839.0], [91.1, 10839.0], [91.2, 10839.0], [91.3, 10839.0], [91.4, 10839.0], [91.5, 10839.0], [91.6, 10839.0], [91.7, 10839.0], [91.8, 10839.0], [91.9, 10839.0], [92.0, 10871.0], [92.1, 10871.0], [92.2, 10871.0], [92.3, 10871.0], [92.4, 10871.0], [92.5, 10871.0], [92.6, 10871.0], [92.7, 10871.0], [92.8, 10871.0], [92.9, 10871.0], [93.0, 11051.0], [93.1, 11051.0], [93.2, 11051.0], [93.3, 11051.0], [93.4, 11051.0], [93.5, 11051.0], [93.6, 11051.0], [93.7, 11051.0], [93.8, 11051.0], [93.9, 11051.0], [94.0, 11498.0], [94.1, 11498.0], [94.2, 11498.0], [94.3, 11498.0], [94.4, 11498.0], [94.5, 11498.0], [94.6, 11498.0], [94.7, 11498.0], [94.8, 11498.0], [94.9, 11498.0], [95.0, 12290.0], [95.1, 12290.0], [95.2, 12290.0], [95.3, 12290.0], [95.4, 12290.0], [95.5, 12290.0], [95.6, 12290.0], [95.7, 12290.0], [95.8, 12290.0], [95.9, 12290.0], [96.0, 12845.0], [96.1, 12845.0], [96.2, 12845.0], [96.3, 12845.0], [96.4, 12845.0], [96.5, 12845.0], [96.6, 12845.0], [96.7, 12845.0], [96.8, 12845.0], [96.9, 12845.0], [97.0, 12963.0], [97.1, 12963.0], [97.2, 12963.0], [97.3, 12963.0], [97.4, 12963.0], [97.5, 12963.0], [97.6, 12963.0], [97.7, 12963.0], [97.8, 12963.0], [97.9, 12963.0], [98.0, 14252.0], [98.1, 14252.0], [98.2, 14252.0], [98.3, 14252.0], [98.4, 14252.0], [98.5, 14252.0], [98.6, 14252.0], [98.7, 14252.0], [98.8, 14252.0], [98.9, 14252.0], [99.0, 14854.0], [99.1, 14854.0], [99.2, 14854.0], [99.3, 14854.0], [99.4, 14854.0], [99.5, 14854.0], [99.6, 14854.0], [99.7, 14854.0], [99.8, 14854.0], [99.9, 14854.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 44.0, "series": [{"data": [[900.0, 1.0], [1300.0, 1.0], [1500.0, 1.0], [2100.0, 1.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [3000.0, 2.0], [3100.0, 1.0], [3300.0, 2.0], [3200.0, 1.0], [3500.0, 1.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 1.0], [4300.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [4800.0, 1.0], [4700.0, 1.0], [5100.0, 4.0], [4900.0, 1.0], [5300.0, 2.0], [5200.0, 1.0], [5400.0, 1.0], [5600.0, 3.0], [5500.0, 1.0], [5700.0, 1.0], [5800.0, 3.0], [6100.0, 2.0], [6300.0, 3.0], [6500.0, 1.0], [6600.0, 1.0], [6900.0, 1.0], [7100.0, 2.0], [7000.0, 1.0], [7300.0, 6.0], [7200.0, 1.0], [7400.0, 1.0], [7500.0, 3.0], [7700.0, 1.0], [7800.0, 1.0], [8100.0, 2.0], [8000.0, 1.0], [8500.0, 1.0], [8600.0, 3.0], [8700.0, 1.0], [8300.0, 4.0], [8400.0, 1.0], [8800.0, 2.0], [9000.0, 1.0], [9700.0, 1.0], [9500.0, 1.0], [10000.0, 2.0], [9800.0, 1.0], [10600.0, 1.0], [10500.0, 2.0], [10800.0, 1.0], [11200.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [12600.0, 1.0], [14000.0, 1.0], [14600.0, 1.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 1.0], [9100.0, 1.0], [600.0, 1.0], [3100.0, 2.0], [200.0, 44.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [1100.0, 1.0], [300.0, 9.0], [1200.0, 2.0], [100.0, 31.0], [400.0, 3.0], [500.0, 2.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1400.0, 1.0], [1600.0, 1.0], [2300.0, 1.0], [2500.0, 1.0], [2700.0, 1.0], [2800.0, 1.0], [3100.0, 2.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 3.0], [4200.0, 1.0], [4900.0, 2.0], [5200.0, 1.0], [5300.0, 2.0], [5500.0, 1.0], [5400.0, 2.0], [5600.0, 1.0], [5700.0, 2.0], [5800.0, 2.0], [5900.0, 1.0], [6000.0, 2.0], [6100.0, 2.0], [6200.0, 2.0], [6300.0, 1.0], [6400.0, 2.0], [6600.0, 1.0], [6500.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7400.0, 2.0], [7300.0, 1.0], [7500.0, 10.0], [7600.0, 1.0], [7800.0, 3.0], [7700.0, 1.0], [8000.0, 2.0], [8700.0, 4.0], [8500.0, 3.0], [8200.0, 1.0], [8300.0, 2.0], [8600.0, 1.0], [9200.0, 2.0], [8800.0, 1.0], [9100.0, 1.0], [9000.0, 1.0], [9700.0, 1.0], [9900.0, 1.0], [10200.0, 2.0], [10100.0, 1.0], [10000.0, 1.0], [10800.0, 4.0], [11000.0, 1.0], [11400.0, 1.0], [12200.0, 1.0], [12900.0, 1.0], [12800.0, 1.0], [14200.0, 1.0], [14800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 203.0, "series": [{"data": [[0.0, 88.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 203.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.762711864406779, "minX": 1.7050989E12, "maxY": 45.369294605809145, "series": [{"data": [[1.7050989E12, 45.369294605809145], [1.70509896E12, 14.762711864406779]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70509896E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 139.5, "minX": 1.0, "maxY": 14854.0, "series": [{"data": [[2.0, 4438.0], [3.0, 11270.0], [4.0, 10037.0], [5.0, 4328.0], [6.0, 7113.0], [7.0, 7548.0], [8.0, 12677.0], [9.0, 10516.0], [10.0, 3960.0], [11.0, 6368.0], [12.0, 8885.0], [13.0, 8382.0], [14.0, 7592.0], [15.0, 7045.0], [16.0, 10563.0], [17.0, 9881.0], [18.0, 8343.0], [19.0, 14068.0], [20.0, 10899.0], [21.0, 6105.0], [22.0, 12759.0], [23.0, 7425.0], [24.0, 8371.0], [25.0, 7392.0], [26.0, 14641.0], [27.0, 9016.0], [28.0, 4777.0], [29.0, 3665.333333333333], [30.0, 5067.0], [31.0, 10647.0], [33.0, 5912.666666666666], [32.0, 4071.0], [35.0, 3666.3333333333335], [34.0, 5395.0], [36.0, 5474.5], [37.0, 9557.0], [39.0, 5528.0], [38.0, 7340.0], [40.0, 6559.0], [41.0, 5959.0], [43.0, 7448.5], [45.0, 5182.0], [44.0, 5341.0], [46.0, 5646.0], [47.0, 4249.333333333333], [49.0, 6998.0], [48.0, 8489.0], [51.0, 5994.0], [50.0, 6714.666666666667], [52.0, 5333.25], [53.0, 6869.0], [55.0, 5825.0], [57.0, 4877.5], [56.0, 4092.0], [59.0, 5655.0], [58.0, 8310.0], [61.0, 8745.0], [60.0, 7252.0], [63.0, 5867.0], [62.0, 3860.0], [65.0, 6427.833333333333], [64.0, 7582.5], [67.0, 6378.0], [66.0, 3152.0], [71.0, 5890.0], [70.0, 5243.0], [69.0, 8608.0], [68.0, 7351.0], [1.0, 975.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[39.350000000000016, 6609.410000000002]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 3194.0], [3.0, 227.0], [4.0, 220.0], [5.0, 3181.0], [6.0, 464.0], [7.0, 205.0], [8.0, 167.0], [9.0, 319.0], [10.0, 3509.0], [11.0, 1159.0], [12.0, 211.0], [13.0, 174.0], [14.0, 210.0], [15.0, 507.0], [16.0, 276.0], [17.0, 246.0], [18.0, 237.0], [19.0, 183.0], [20.0, 152.0], [21.0, 225.0], [22.0, 203.0], [23.0, 3444.0], [24.0, 250.0], [25.0, 419.0], [26.0, 212.0], [27.0, 214.0], [28.0, 1298.0], [29.0, 201.33333333333334], [30.0, 192.5], [31.0, 179.0], [33.0, 210.0], [32.0, 3234.0], [35.0, 576.0], [34.0, 162.0], [36.0, 250.5], [37.0, 240.0], [39.0, 685.0], [38.0, 256.0], [40.0, 157.0], [41.0, 243.5], [43.0, 391.5], [45.0, 229.0], [44.0, 328.0], [46.0, 250.5], [47.0, 275.3333333333333], [49.0, 152.0], [48.0, 306.0], [51.0, 171.5], [50.0, 170.33333333333334], [52.0, 227.0], [53.0, 162.0], [55.0, 235.0], [57.0, 237.0], [56.0, 251.5], [59.0, 179.0], [58.0, 247.0], [61.0, 462.0], [60.0, 250.0], [63.0, 234.0], [62.0, 350.0], [65.0, 165.83333333333334], [64.0, 139.5], [67.0, 176.0], [66.0, 356.0], [71.0, 233.0], [70.0, 215.0], [69.0, 190.0], [68.0, 184.0], [1.0, 9107.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[39.350000000000016, 507.87999999999994]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 7632.0], [3.0, 11498.0], [4.0, 10258.0], [5.0, 7510.0], [6.0, 7578.0], [7.0, 7753.0], [8.0, 12845.0], [9.0, 10835.0], [10.0, 7470.0], [11.0, 7530.0], [12.0, 9097.0], [13.0, 8557.0], [14.0, 7803.0], [15.0, 7553.0], [16.0, 10839.0], [17.0, 10128.0], [18.0, 8581.0], [19.0, 14252.0], [20.0, 11051.0], [21.0, 6332.0], [22.0, 12963.0], [23.0, 10871.0], [24.0, 8621.0], [25.0, 7812.0], [26.0, 14854.0], [27.0, 9231.0], [28.0, 6076.0], [29.0, 3867.333333333333], [30.0, 5261.0], [31.0, 10827.0], [33.0, 6124.333333333334], [32.0, 7307.0], [35.0, 4244.333333333333], [34.0, 5558.5], [36.0, 5726.0], [37.0, 9799.0], [39.0, 6214.0], [38.0, 7597.0], [40.0, 6717.0], [41.0, 6206.0], [43.0, 7841.0], [45.0, 5412.0], [44.0, 5670.0], [46.0, 5898.0], [47.0, 4527.333333333333], [49.0, 7151.0], [48.0, 8797.0], [51.0, 6166.5], [50.0, 6886.0], [52.0, 5561.5], [53.0, 7032.5], [55.0, 6060.5], [57.0, 5115.5], [56.0, 4345.0], [59.0, 5835.0], [58.0, 8558.0], [61.0, 9208.0], [60.0, 7503.0], [63.0, 6103.0], [62.0, 4211.0], [65.0, 6594.666666666667], [64.0, 7723.0], [67.0, 6555.0], [66.0, 3509.0], [71.0, 6124.0], [70.0, 5458.0], [69.0, 8799.0], [68.0, 7536.0], [1.0, 10080.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[39.350000000000016, 7118.46]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 71.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 186.26666666666668, "minX": 1.7050989E12, "maxY": 1548157.8333333333, "series": [{"data": [[1.7050989E12, 1548157.8333333333], [1.70509896E12, 632267.1666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7050989E12, 660.4], [1.70509896E12, 186.26666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70509896E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 421.02020202020196, "minX": 1.7050989E12, "maxY": 9420.65517241379, "series": [{"data": [[1.7050989E12, 5890.788732394366], [1.70509896E12, 8368.793103448277]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7050989E12, 421.02020202020196], [1.70509896E12, 9107.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7050989E12, 6178.126760563379], [1.70509896E12, 9420.65517241379]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70509896E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 285.57746478873236, "minX": 1.7050989E12, "maxY": 9107.0, "series": [{"data": [[1.7050989E12, 1887.9859154929577], [1.70509896E12, 2836.8275862068967]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7050989E12, 420.70707070707067], [1.70509896E12, 9107.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7050989E12, 285.57746478873236], [1.70509896E12, 1051.0689655172414]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70509896E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 165.05633802816905, "minX": 1.7050989E12, "maxY": 9051.0, "series": [{"data": [[1.7050989E12, 551.2253521126761], [1.70509896E12, 1518.724137931034]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7050989E12, 294.3232323232323], [1.70509896E12, 9051.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7050989E12, 165.05633802816905], [1.70509896E12, 912.7586206896551]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70509896E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 93.0, "minX": 1.7050989E12, "maxY": 14854.0, "series": [{"data": [[1.7050989E12, 12290.0], [1.70509896E12, 14854.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7050989E12, 8512.2], [1.70509896E12, 12845.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7050989E12, 11557.21999999998], [1.70509896E12, 14854.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7050989E12, 9072.399999999994], [1.70509896E12, 14252.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7050989E12, 93.0], [1.70509896E12, 975.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7050989E12, 3444.0], [1.70509896E12, 8557.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70509896E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 211.0, "minX": 1.0, "maxY": 9107.0, "series": [{"data": [[8.0, 2041.0], [2.0, 6035.0], [10.0, 1214.5], [12.0, 3247.5], [13.0, 212.0], [14.0, 289.5], [16.0, 211.0], [1.0, 9107.0], [19.0, 6683.0], [20.0, 7896.5], [21.0, 5194.0], [23.0, 2320.0], [24.0, 8092.5], [25.0, 3849.0], [26.0, 7521.5], [30.0, 8818.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 195.5, "minX": 1.0, "maxY": 9107.0, "series": [{"data": [[8.0, 206.0], [2.0, 3499.5], [10.0, 383.5], [12.0, 320.0], [13.0, 212.0], [14.0, 263.0], [16.0, 195.5], [1.0, 9107.0], [19.0, 1630.0], [20.0, 1173.0], [21.0, 328.0], [23.0, 222.0], [24.0, 1426.0], [25.0, 220.0], [26.0, 691.5], [30.0, 1065.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7050989E12, "maxY": 4.983333333333333, "series": [{"data": [[1.7050989E12, 4.983333333333333], [1.70509896E12, 0.016666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70509896E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7050989E12, "maxY": 2.3666666666666667, "series": [{"data": [[1.7050989E12, 2.3666666666666667], [1.70509896E12, 0.9666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7050989E12, 1.65], [1.70509896E12, 0.016666666666666666]], "isOverall": false, "label": "302", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70509896E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7050989E12, "maxY": 1.65, "series": [{"data": [[1.7050989E12, 1.1833333333333333], [1.70509896E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7050989E12, 1.65], [1.70509896E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.7050989E12, 1.1833333333333333], [1.70509896E12, 0.48333333333333334]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70509896E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.7050989E12, "maxY": 4.016666666666667, "series": [{"data": [[1.7050989E12, 4.016666666666667], [1.70509896E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70509896E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

